{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\project-module2\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// importfunctionalities\nimport React from 'react';\nimport './App.css';\nimport { Connection, clusterApiUrl, Keypair, LAMPORTS_PER_SOL, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\n\n// create types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * @description gets Phantom provider, if it exists\n */\nconst getProvider = () => {\n  if (\"solana\" in window) {\n    // @ts-ignore\n    const provider = window.solana;\n    if (provider.isPhantom) return provider;\n  }\n};\nfunction App() {\n  _s();\n  // create state variable for the keypair\n  const [keypair, setKeypair] = useState(undefined);\n  // create state variable for the provider\n  const [provider, setProvider] = useState(undefined);\n\n  // create state variable for the wallet key\n  const [walletKey, setWalletKey] = useState(undefined);\n\n  // this is the function that runs whenever the component updates (e.g. render, refresh)\n  useEffect(() => {\n    const provider = getProvider();\n\n    // if the phantom provider exists, set this as the provider\n    if (provider) setProvider(provider);else setProvider(undefined);\n  }, []);\n\n  /**\n   * @description prompts user to connect wallet if it exists.\n  * This function is called when the connect wallet button is clicked\n   */\n  const connectWallet = async () => {\n    // @ts-ignore\n    const {\n      solana\n    } = window;\n\n    // checks if phantom wallet exists\n    if (solana) {\n      try {\n        // connects wallet and returns response which includes the wallet public key\n        const response = await solana.connect();\n        console.log('wallet account ', response.publicKey.toString());\n        // update walletKey to be the public key\n        setWalletKey(response.publicKey.toString());\n      } catch (err) {\n        // { code: 4001, message: 'User rejected the request.' }\n      }\n    }\n  };\n  const createSolanaAccount = async () => {\n    try {\n      console.log(\"enter create solana account function\");\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const newPair = Keypair.generate();\n      // Airdrops 2 SOL to the newly created Keypair\n      const airDropSignature = await connection.requestAirdrop(newPair.publicKey, 2 * LAMPORTS_PER_SOL);\n\n      // Latest blockhash (unique identifer of the block) of the cluster\n      let latestBlockHash = await connection.getLatestBlockhash();\n\n      // Confirm transaction using the last valid block height (refers to its time)\n      // to check for transaction expiration\n      await connection.confirmTransaction({\n        blockhash: latestBlockHash.blockhash,\n        lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n        signature: airDropSignature\n      });\n      console.log(\"Airdrop completed\");\n      setKeypair(newPair.publicKey);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n    }\n  };\n  const transferToWallet = async () => {\n    console.log(\"phantom wallet key is \", walletKey);\n    // Send money from \"from\" wallet and into \"to\" wallet\n    var transaction = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: keypair.publicKey,\n      toPubkey: to.publicKey,\n      lamports: LAMPORTS_PER_SOL / 100\n    }));\n\n    // Sign transaction\n    var signature = await sendAndConfirmTransaction(connection, transaction, [from]);\n  };\n\n  // HTML code for the app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Project for Module 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), !keypair && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: createSolanaAccount,\n      children: \"Create a new Solana account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this), keypair && provider && !walletKey && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }, this), provider && walletKey && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: transferToWallet,\n      children: \"Transfer to new wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }, this), !provider && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No provider found. Install\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://phantom.app/\",\n        children: \"Phantom Browser extension\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+EUET4/mbtsIYGz1GQRib2bPYiU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Connection","clusterApiUrl","Keypair","LAMPORTS_PER_SOL","SystemProgram","Transaction","useEffect","useState","getProvider","window","provider","solana","isPhantom","App","keypair","setKeypair","undefined","setProvider","walletKey","setWalletKey","connectWallet","response","connect","console","log","publicKey","toString","err","createSolanaAccount","connection","newPair","generate","airDropSignature","requestAirdrop","latestBlockHash","getLatestBlockhash","confirmTransaction","blockhash","lastValidBlockHeight","signature","transferToWallet","transaction","add","transfer","fromPubkey","toPubkey","to","lamports","sendAndConfirmTransaction","from","fontSize","padding","fontWeight","borderRadius"],"sources":["C:/dev/project-module2/src/App.tsx"],"sourcesContent":["\n// importfunctionalities\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  Connection,\n  PublicKey,\n  clusterApiUrl,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {useEffect , useState } from \"react\";\n\n// create types\ntype DisplayEncoding = \"utf8\" | \"hex\";\n\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\n// create a provider interface (hint: think of this as an object) to store the Phantom Provider\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<any>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\n/**\n * @description gets Phantom provider, if it exists\n */\n const getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    // @ts-ignore\n    const provider = window.solana as any;\n    if (provider.isPhantom) return provider as PhantomProvider;\n  }\n};\n\nfunction App() {\n  // create state variable for the keypair\n  const [keypair, setKeypair] = useState<PublicKey | undefined>(\n    undefined\n  );\n  // create state variable for the provider\n  const [provider, setProvider] = useState<PhantomProvider | undefined>(\n    undefined\n  );\n\n\t// create state variable for the wallet key\n  const [walletKey, setWalletKey] = useState<PhantomProvider | undefined>(\n  undefined\n  );\n\n  // this is the function that runs whenever the component updates (e.g. render, refresh)\n  useEffect(() => {\n\t  const provider = getProvider();\n\n\t\t// if the phantom provider exists, set this as the provider\n\t  if (provider) setProvider(provider);\n\t  else setProvider(undefined);\n  }, []);\n\n  /**\n   * @description prompts user to connect wallet if it exists.\n\t * This function is called when the connect wallet button is clicked\n   */\n  const connectWallet = async () => {\n    // @ts-ignore\n    const { solana } = window;\n\n\t\t// checks if phantom wallet exists\n    if (solana) {\n      try {\n\t\t\t\t// connects wallet and returns response which includes the wallet public key\n        const response = await solana.connect();\n        console.log('wallet account ', response.publicKey.toString());\n\t\t\t\t// update walletKey to be the public key\n        setWalletKey(response.publicKey.toString());\n      } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n      }\n    }\n  };\n  \n  const createSolanaAccount = async () => {\n    try {\n      console.log(\"enter create solana account function\");\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const newPair = Keypair.generate();\n      // Airdrops 2 SOL to the newly created Keypair\n      const airDropSignature = await connection.requestAirdrop(\n        newPair.publicKey,\n          2 * LAMPORTS_PER_SOL\n      );\n\n      // Latest blockhash (unique identifer of the block) of the cluster\n      let latestBlockHash = await connection.getLatestBlockhash();\n\n      // Confirm transaction using the last valid block height (refers to its time)\n      // to check for transaction expiration\n      await connection.confirmTransaction({\n          blockhash: latestBlockHash.blockhash,\n          lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n          signature: airDropSignature\n      });\n      console.log(\"Airdrop completed\");\n      setKeypair(newPair.publicKey);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n    }\n  };\n\n  const transferToWallet = async () => {\n    console.log(\"phantom wallet key is \", walletKey);\n      // Send money from \"from\" wallet and into \"to\" wallet\n      var transaction = new Transaction().add(\n        SystemProgram.transfer({\n            fromPubkey: keypair.publicKey,\n            toPubkey: to.publicKey,\n            lamports: LAMPORTS_PER_SOL / 100\n        })\n    );\n\n    // Sign transaction\n    var signature = await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [from]\n    );\n  };\n\n\t// HTML code for the app\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Project for Module 2</h2>\n      </header>\n      {!keypair && (\n          <button\n            style={{\n              fontSize: \"16px\",\n              padding: \"15px\",\n              fontWeight: \"bold\",\n              borderRadius: \"5px\",\n            }}\n            onClick={createSolanaAccount}\n          >\n            Create a new Solana account\n          </button>\n        )}\n      {keypair && provider && !walletKey && (\n          <button\n            style={{\n              fontSize: \"16px\",\n              padding: \"15px\",\n              fontWeight: \"bold\",\n              borderRadius: \"5px\",\n            }}\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        )}\n        {provider && walletKey && ( \n          <button\n          style={{\n            fontSize: \"16px\",\n            padding: \"15px\",\n            fontWeight: \"bold\",\n            borderRadius: \"5px\",\n          }}\n          onClick={transferToWallet}\n        >\n          Transfer to new wallet\n        </button>\n                )}\n\n        {!provider && (\n          <p>\n            No provider found. Install{\" \"}\n            <a href=\"https://phantom.app/\">Phantom Browser extension</a>\n          </p>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}