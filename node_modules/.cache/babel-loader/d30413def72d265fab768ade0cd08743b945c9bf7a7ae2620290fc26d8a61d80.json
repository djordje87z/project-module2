{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\project-module2\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// importfunctionalities\nimport React from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl, Keypair, LAMPORTS_PER_SOL, SystemProgram, Transaction, sendAndConfirmTransaction } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport * as buffer from \"buffer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.Buffer = buffer.Buffer;\nconst TRANSACTION_FEE = 50000;\n\n// create types\n\n/**\n * @description gets Phantom provider, if it exists\n */\nconst getProvider = () => {\n  if (\"solana\" in window) {\n    // @ts-ignore\n    const provider = window.solana;\n    if (provider.isPhantom) return provider;\n  }\n};\nfunction App() {\n  _s();\n  // create state variable for the secretKey\n  const [secretKey, setKeypair] = useState(PublicKey.default.toBytes());\n  const [solanaAcc, setAccount] = useState(undefined);\n  // create state variable for the provider\n  const [provider, setProvider] = useState(undefined);\n\n  // create state variable for the wallet key\n  const [walletKey, setWalletKey] = useState(undefined);\n\n  // this is the function that runs whenever the component updates (e.g. render, refresh)\n  useEffect(() => {\n    const provider = getProvider();\n\n    // if the phantom provider exists, set this as the provider\n    if (provider) setProvider(provider);else setProvider(undefined);\n  }, []);\n\n  /**\n   * @description prompts user to connect wallet if it exists.\n  * This function is called when the connect wallet button is clicked\n   */\n  const connectWallet = async () => {\n    // @ts-ignore\n    const {\n      solana\n    } = window;\n\n    // checks if phantom wallet exists\n    if (solana) {\n      try {\n        // connects wallet and returns response which includes the wallet public key\n        const response = await solana.connect();\n        console.log('wallet account ', response.publicKey.toString());\n        // update walletKey to be the public key\n        setWalletKey(response.publicKey.toString());\n      } catch (err) {\n        // { code: 4001, message: 'User rejected the request.' }\n      }\n    }\n  };\n  const createSolanaAccount = async () => {\n    try {\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const newPair = Keypair.generate();\n      // Airdrops 2 SOL to the newly created Keypair\n      const airDropSignature = await connection.requestAirdrop(newPair.publicKey, 3 * LAMPORTS_PER_SOL);\n      // Latest blockhash (unique identifer of the block) of the cluster\n      let latestBlockHash = await connection.getLatestBlockhash();\n      // Confirm transaction using the last valid block height (refers to its time)\n      // to check for transaction expiration\n      await connection.confirmTransaction({\n        blockhash: latestBlockHash.blockhash,\n        lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n        signature: airDropSignature\n      });\n      setKeypair(newPair.secretKey);\n      setAccount(true);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n    }\n  };\n  const transferToWallet = async () => {\n    try {\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const from = Keypair.fromSecretKey(secretKey);\n      if ((provider === null || provider === void 0 ? void 0 : provider.publicKey) === undefined) throw new Error('Phantom wallet undefined!');\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: from.publicKey,\n        toPubkey: provider.publicKey,\n        lamports: 2 * LAMPORTS_PER_SOL\n      });\n      // Send money from \"from\" wallet and into \"to\" wallet\n      var transaction = new Transaction().add(TransactionInstruction);\n      // Sign transaction\n      var signature = await sendAndConfirmTransaction(connection, transaction, [from]);\n      setAccount(false);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n      console.error(err);\n    }\n  };\n\n  // HTML code for the app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Project for Module 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), !solanaAcc && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: createSolanaAccount,\n      children: \"Create a new Solana account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }, this), solanaAcc && provider && !walletKey && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }, this), provider && walletKey && /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        fontSize: \"16px\",\n        padding: \"15px\",\n        fontWeight: \"bold\",\n        borderRadius: \"5px\"\n      },\n      onClick: transferToWallet,\n      children: \"Transfer to new wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }, this), !provider && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No provider found. Install\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://phantom.app/\",\n        children: \"Phantom Browser extension\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/feFEQBP0/Qy0O6vwzIkaKhsuUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Connection","PublicKey","clusterApiUrl","Keypair","LAMPORTS_PER_SOL","SystemProgram","Transaction","sendAndConfirmTransaction","useEffect","useState","buffer","window","Buffer","TRANSACTION_FEE","getProvider","provider","solana","isPhantom","App","secretKey","setKeypair","default","toBytes","solanaAcc","setAccount","undefined","setProvider","walletKey","setWalletKey","connectWallet","response","connect","console","log","publicKey","toString","err","createSolanaAccount","connection","newPair","generate","airDropSignature","requestAirdrop","latestBlockHash","getLatestBlockhash","confirmTransaction","blockhash","lastValidBlockHeight","signature","transferToWallet","from","fromSecretKey","Error","TransactionInstruction","transfer","fromPubkey","toPubkey","lamports","transaction","add","error","fontSize","padding","fontWeight","borderRadius"],"sources":["C:/dev/project-module2/src/App.tsx"],"sourcesContent":["\n// importfunctionalities\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  Connection,\n  PublicKey,\n  clusterApiUrl,\n  Keypair,\n  LAMPORTS_PER_SOL,\n  SystemProgram,\n  Transaction,\n  sendAndConfirmTransaction,\n} from \"@solana/web3.js\";\nimport {useEffect , useState } from \"react\";\n\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n\nconst TRANSACTION_FEE = 50000;\n\n// create types\ntype DisplayEncoding = \"utf8\" | \"hex\";\n\ntype PhantomEvent = \"disconnect\" | \"connect\" | \"accountChanged\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\n// create a provider interface (hint: think of this as an object) to store the Phantom Provider\ninterface PhantomProvider {\n  publicKey: PublicKey;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<any>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\n/**\n * @description gets Phantom provider, if it exists\n */\n const getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    // @ts-ignore\n    const provider = window.solana as any;\n    if (provider.isPhantom) return provider as PhantomProvider;\n  }\n};\n\nfunction App() {\n  // create state variable for the secretKey\n  const [secretKey, setKeypair] = useState<Uint8Array>(PublicKey.default.toBytes());\n  const [solanaAcc, setAccount] = useState<boolean | undefined>(undefined);\n  // create state variable for the provider\n  const [provider, setProvider] = useState<PhantomProvider | undefined>(\n    undefined\n  );\n\n\t// create state variable for the wallet key\n  const [walletKey, setWalletKey] = useState<PhantomProvider | undefined>(\n  undefined\n);\n\n  // this is the function that runs whenever the component updates (e.g. render, refresh)\n  useEffect(() => {\n\t  const provider = getProvider();\n\n\t\t// if the phantom provider exists, set this as the provider\n\t  if (provider) setProvider(provider);\n\t  else setProvider(undefined);\n  }, []);\n\n  /**\n   * @description prompts user to connect wallet if it exists.\n\t * This function is called when the connect wallet button is clicked\n   */\n  const connectWallet = async () => {\n    // @ts-ignore\n    const { solana } = window;\n\n\t\t// checks if phantom wallet exists\n    if (solana) {\n      try {\n\t\t\t\t// connects wallet and returns response which includes the wallet public key\n        const response = await solana.connect();\n        console.log('wallet account ', response.publicKey.toString());\n\t\t\t\t// update walletKey to be the public key\n        setWalletKey(response.publicKey.toString());\n      } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n      }\n    }\n  };\n  \n  const createSolanaAccount = async () => {\n    try {\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const newPair = Keypair.generate();\n      // Airdrops 2 SOL to the newly created Keypair\n      const airDropSignature = await connection.requestAirdrop(\n        newPair.publicKey,\n        3 * LAMPORTS_PER_SOL\n      );\n      // Latest blockhash (unique identifer of the block) of the cluster\n      let latestBlockHash = await connection.getLatestBlockhash();\n      // Confirm transaction using the last valid block height (refers to its time)\n      // to check for transaction expiration\n      await connection.confirmTransaction({\n          blockhash: latestBlockHash.blockhash,\n          lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n          signature: airDropSignature\n      });\n      setKeypair(newPair.secretKey);\n      setAccount(true);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n    }\n  };\n\n  const transferToWallet = async () => {\n    try {\n      const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n      const from = Keypair.fromSecretKey(secretKey);\n      if(provider?.publicKey === undefined) throw new Error('Phantom wallet undefined!');\n      const TransactionInstruction = SystemProgram.transfer({\n        fromPubkey: from.publicKey,\n        toPubkey: provider.publicKey,\n        lamports: 2 * LAMPORTS_PER_SOL\n      });\n      // Send money from \"from\" wallet and into \"to\" wallet\n      var transaction = new Transaction().add(TransactionInstruction);\n      // Sign transaction\n      var signature = await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [from]\n      );\n      setAccount(false);\n    } catch (err) {\n      // { code: 4001, message: 'User rejected the request.' }\n      console.error(err);\n    }\n  };\n\n\t// HTML code for the app\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Project for Module 2</h2>\n      </header>\n      {!solanaAcc && (\n          <button\n            style={{\n              fontSize: \"16px\",\n              padding: \"15px\",\n              fontWeight: \"bold\",\n              borderRadius: \"5px\",\n            }}\n            onClick={createSolanaAccount}\n          >\n            Create a new Solana account\n          </button>\n        )}\n      {solanaAcc && provider && !walletKey && (\n          <button\n            style={{\n              fontSize: \"16px\",\n              padding: \"15px\",\n              fontWeight: \"bold\",\n              borderRadius: \"5px\",\n            }}\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        )}\n        {provider && walletKey && ( \n          <button\n          style={{\n            fontSize: \"16px\",\n            padding: \"15px\",\n            fontWeight: \"bold\",\n            borderRadius: \"5px\",\n          }}\n          onClick={transferToWallet}\n        >\n          Transfer to new wallet\n        </button>\n                )}\n\n        {!provider && (\n          <p>\n            No provider found. Install{\" \"}\n            <a href=\"https://phantom.app/\">Phantom Browser extension</a>\n          </p>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}